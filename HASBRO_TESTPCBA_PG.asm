
C_TESTM0_0 EQU E0H ;
C_TESTM0_1 EQU E1H ;
C_TESTM0_2 EQU E2H ; 
C_TESTM0_3 EQU E3H ;
C_TESTM0_4 EQU E4H ;
C_TESTM0_5 EQU E5H ;

C_TESTM0_ERROR EQU EEH ;
C_TESTM0_EXIT EQU EFH ;

;==============================
;	hasbro test way
;==============================
;
STEP_TBL_INC:
	
	MR_PLAY_SP	CS_BEBE_6K
STEP_TBL_INC_WO_SP:
	JSR	BK0_LEDS_OFF
	MR_SET_DLYCNT0 CNT_STOP
	
	INC	SYS_MODE_NO
STEP_TBL_JMP:
	LDA	SYS_MODE_NO
	AND	#0FH
	ASL	A
	TAX
	JMP	(STEP_TBL,X)
STEP_TBL:
	DW	T00_LOOP_PRE;enter
	DW	T10_LOOP_PRE;checksum
	DW	T20_LOOP_PRE; wait checksum correct
	DW	T30_LOOP_PRE;KEY TEST
	DW	T40_LOOP_PRE; LED TEST
	DW	T50_LOOP_PRE;speech dump
	DW	L_TEST_EXIT;


TESTPCBA_PRE:
	MACRO_INT_ENABLE FXF15_INT_BIT
.IF ( C_TMGX_EN .EQ. 1 )
	MR_TMGX_SET
.ENDIF


;check real test mode
;SW1
	MR_DET_TEST_PIN
	BNE	POI_TEST_S100_J1
;tummy
;delay 1sec
	LDY	#256-100
POI_TEST_S11:
	MACRO_CLR_WDT

	JSR	BK0_DELAY61440CYCLE ; 10MS
	
	MR_DET_TEST_PIN
	BEQ	POI_TEST_S12
;LOW TO HIGH
	
POI_TEST_S100_J1:
	JMP	POI_TEST_S100
	
POI_TEST_S12:
	INY
	BNE	POI_TEST_S11
; 1SEC REACH	
;
;step2: check sw2  3 times
	MR_HASBRO_TESTPCBA_ENTER_SOUND
	
	MR_SET_DLYCNT0 T002000MS
;debug
;	MR_SET_DLYCNT0 T005000MS

	STZ	WB_DLYCNT0_IDX ; TEMP USE
	STZ	WB_DLYCNT1_IDX
	
POI_CHK_LOOP:
	JSR	WAITKEY
POI_CHK_LOOP_S10:
	
	LDA	USER_FLAG_A
	BIT	#C_KEYCH0_BIT
	BNE	POI_CHK_LOOP_KEYCH0
	BIT	#C_KEYCH1_BIT
	BNE	POI_CHK_LOOP_KEYCH1
	BIT	#C_KEYCH2_BIT
	BNE	POI_CHK_LOOP_KEYCH2
	
	LDA	USER_FLAG_B
	BIT	#C_CNT0_BIT
	BNE	POI_CHK_LOOP_CNT0
	
	JMP	POI_CHK_LOOP

POI_CHK_LOOP_KEYCH0:
; key channel 0
	MACRO_CLR_KEYCH0_FLAG

	LDA	WB_KEYCH_CODE
	ASL	A
	TAX
	JMP	(POI_CHK_LOOP_KEYCH0_TBL,X)
POI_CHK_LOOP_KEYCH0_TBL:
	DW	POI_CHK_LOOP_KEYCH0_0
	DW	POI_CHK_LOOP_KEYCH0_1

POI_CHK_LOOP_KEYCH0_0:
	
	JMP	POI_CHK_LOOP_S10
	
POI_CHK_LOOP_KEYCH0_1:
	MR_TEST_KEY_INC
	JMP	POI_CHK_LOOP_S10

POI_CHK_LOOP_KEYCH1:
	MACRO_CLR_KEYCH1_FLAG

	JMP	POI_CHK_LOOP_S10
	
POI_CHK_LOOP_KEYCH2:
	MACRO_CLR_KEYCH2_FLAG

	JMP	POI_CHK_LOOP_S10
	
POI_CHK_LOOP_CNT0:
	MACRO_CLR_CNT0_FLAG
; TIME OUT

	LDA	WB_DLYCNT0_IDX
	CMP	#3
	BNE	POI_CHK_LOOP_CNT0_S10
	
	MR_SET_MODE_NO C_TESTM0_0
	JMP	STEP_TBL_JMP

	
POI_CHK_LOOP_CNT0_S10:
POI_TEST_S100:
	JMP	TESTPCBA_RET


;===========================================
; TESTPCBA FLOWCHART
;============================================
;-------------------------------
T00_LOOP_PRE:
;-------------------------------
;

	MACRO_INT_ENABLE FXF15_INT_BIT

	PLAY English6k+PN00+[300MSEC]+PN01 ; INT LANG AND CODE VERSION
;WAIT EQU END
	JSR	WAIT_SPCH1_W_CHK
;***: key release to interrup
;=======================================
; insert new sub mode
;=======================================
	JMP	STEP_TBL_INC_WO_SP
	
;========================================
;	checksum
;========================================
T10_LOOP_PRE:

;1,Play language and code version
;2,Run checksum; BIT
;3,Play 1khz tone
;	PLAY English6k+PN01 ; INT LANG AND CODE VERSION
;WAIT EQU END
;	JSR	WAIT_SPCH1_W_CHK
	
	CHECKSUM
	LDA	<CHECK_RESULT
	BNE	CHECKSUM_ERROR
	LDA	<CHECK_RESULT+1
	BNE	CHECKSUM_ERROR
;checksum ok
CHECKSUM_OK:
	MR_PLAY_SP	CS_T1KHZ_8K
	
	JMP	CHECKSUM_END
CHECKSUM_ERROR:
;debug
;	BRA	CHECKSUM_OK

	JMP	L_TEST_ERROR
CHECKSUM_END:
;
;	JSR	WAIT_SPCH1_W_CHK

	JMP	STEP_TBL_INC_WO_SP

;==========================
; wait checksum
;==========================
T20_LOOP_PRE:

	MR_SET_DLYCNT0 CNT_STOP

	MR_SET_AUTOCNT2_TEST; enter stop / next step

T20_LOOP:
	JSR	WAITKEY
T20_LOOP_S10:
	LDA	USER_FLAG_A
	BIT	#C_KEYCH0_BIT
	BNE	T20_LOOP_KEYCH0_J1
	BIT	#C_KEYCH1_BIT
	BNE	T20_LOOP_KEYCH1_J1
	BIT	#C_KEYCH2_BIT
	BNE	T20_LOOP_KEYCH2_J1
	BIT	#C_KEYCH3_BIT
	BNE	T20_LOOP_KEYCH3_J1
	BIT	#C_SPCH1_BIT
	BNE	T20_LOOP_CH1END_J1
	BIT	#C_SPCH2_BIT
	BNE	T20_LOOP_CH2END_J1
	
	LDA	USER_FLAG_B
	BIT	#C_CNT0_BIT
	BNE	T20_LOOP_CNT0
	BIT	#C_CNT1_BIT
	BNE	T20_LOOP_CNT1
	BIT	#C_AUTO_CNT_BIT
	BNE	T20_LOOP_AUTOCNT_J1
	
	JMP	T20_LOOP
T20_LOOP_KEYCH0_J1:
	JMP	T20_LOOP_KEYCH0
T20_LOOP_KEYCH1_J1:
	JMP	T20_LOOP_KEYCH1
T20_LOOP_KEYCH2_J1:
	JMP	T20_LOOP_KEYCH2
T20_LOOP_KEYCH3_J1:
	JMP	T20_LOOP_KEYCH3
T20_LOOP_AUTOCNT_J1:
	JMP T20_LOOP_AUTOCNT
T20_LOOP_CH1END_J1:
	JMP T20_LOOP_CH1END
T20_LOOP_CH2END_J1:
	JMP T20_LOOP_CH2END
T20_LOOP_CNT0:; IDLE TIMER
	MACRO_CLR_CNT0_FLAG

	JMP	T20_LOOP_S10
T20_LOOP_CNT1:
	MACRO_CLR_CNT1_FLAG
;

	JMP	T20_LOOP_S10


T20_LOOP_CH1END:
	MACRO_CLR_CH1_FLAG
;
;
	
	JMP	T20_LOOP_S10
	
T20_LOOP_CH2END:
	MACRO_CLR_CH2_FLAG
;


	JMP	T20_LOOP_S10

T20_LOOP_AUTOCNT:
	MACRO_CLR_AUTOCNT_FLAG
;
	JSR	STOP_ALL
.IF ( C_AUTO_NEXT_EN .EQ. 1)
	JMP	STEP_TBL_INC_WO_SP
.ELSE
	JMP	L_TEST_ERROR
.ENDIF
	
T20_LOOP_KEYCH1:
	MACRO_CLR_KEYCH1_FLAG
;


	JMP	T20_LOOP_S10
T20_LOOP_KEYCH2:
	MACRO_CLR_KEYCH2_FLAG
;

	JMP	T20_LOOP_S10
T20_LOOP_KEYCH3:
	MACRO_CLR_KEYCH3_FLAG
	
	JMP	T20_LOOP_S10

T20_LOOP_KEYCH0:
	MACRO_CLR_KEYCH0_FLAG
; key channel 0
	LDA	WB_KEYCH_CODE
	ASL	A
	TAX
	JMP	(T20_LOOP_KEYCH0_TBL,X)
T20_LOOP_KEYCH0_TBL
	DW	T20_LOOP_KEYCH0_0
	DW	T20_LOOP_KEYCH0_1
	
T20_LOOP_KEYCH0_0
	
	JMP	T20_LOOP_S10
	
T20_LOOP_KEYCH0_1:

	JMP	STEP_TBL_INC

	


;=====================
;KEY TEST
;=====================
T30_LOOP_PRE: ;


	MR_SET_DLYCNT0 CNT_STOP
	JSR	BK0_LEDS_OFF

	MR_SET_AUTOCNT2_TEST; enter stop / next step

T30_LOOP:
	JSR	WAITKEY
T30_LOOP_S10:
	LDA	USER_FLAG_A
	BIT	#C_KEYCH0_BIT
	BNE	T30_LOOP_KEYCH0_J1
	BIT	#C_KEYCH1_BIT
	BNE	T30_LOOP_KEYCH1_J1
	BIT	#C_KEYCH2_BIT
	BNE	T30_LOOP_KEYCH2_J1
	BIT	#C_KEYCH3_BIT
	BNE	T30_LOOP_KEYCH3_J1
	BIT	#C_SPCH1_BIT
	BNE	T30_LOOP_CH1END_J1
	BIT	#C_SPCH2_BIT
	BNE	T30_LOOP_CH2END_J1
	
	LDA	USER_FLAG_B
	BIT	#C_CNT0_BIT
	BNE	T30_LOOP_CNT0
	BIT	#C_CNT1_BIT
	BNE	T30_LOOP_CNT1
	BIT	#C_AUTO_CNT_BIT
	BNE	T30_LOOP_AUTOCNT_J1
	
	JMP	T30_LOOP
T30_LOOP_KEYCH0_J1:
	JMP	T30_LOOP_KEYCH0
T30_LOOP_KEYCH1_J1:
	JMP	T30_LOOP_KEYCH1
T30_LOOP_KEYCH2_J1:
	JMP	T30_LOOP_KEYCH2
T30_LOOP_KEYCH3_J1:
	JMP	T30_LOOP_KEYCH3
T30_LOOP_AUTOCNT_J1:
	JMP T30_LOOP_AUTOCNT
T30_LOOP_CH1END_J1:
	JMP T30_LOOP_CH1END
T30_LOOP_CH2END_J1:
	JMP T30_LOOP_CH2END
T30_LOOP_CNT0:; 
	MACRO_CLR_CNT0_FLAG
;
	JMP	T30_LOOP_S10

T30_LOOP_CNT1:
	MACRO_CLR_CNT1_FLAG
;

	JMP	T30_LOOP_S10

T30_LOOP_CH1END:
	MACRO_CLR_CH1_FLAG
;
;
	
	JMP	T30_LOOP_S10
	
T30_LOOP_CH2END:
	MACRO_CLR_CH2_FLAG
;
;	
;	
	JMP	T30_LOOP_S10

T30_LOOP_AUTOCNT:
	MACRO_CLR_AUTOCNT_FLAG
;

.IF ( C_AUTO_NEXT_EN .EQ. 1)
	JMP	STEP_TBL_INC
.ELSE
	JMP	L_TEST_ERROR
.ENDIF
	
T30_LOOP_KEYCH1:
	MACRO_CLR_KEYCH1_FLAG
;
	MR_SET_DLYCNT0 T000504MS

	PLAY	di_6k

	JMP	T30_LOOP_S10
T30_LOOP_KEYCH2:
	MACRO_CLR_KEYCH2_FLAG
;

	JMP	T30_LOOP_S10
T30_LOOP_KEYCH3:
	MACRO_CLR_KEYCH3_FLAG
	
	JMP	T30_LOOP_S10

T30_LOOP_KEYCH0:
	MACRO_CLR_KEYCH0_FLAG
; key channel 0

	LDA	WB_KEYCH_CODE
	ASL	A
	TAX
	JMP	(T30_LOOP_KEYCH0_TBL,X)
T30_LOOP_KEYCH0_TBL
	DW	T30_LOOP_KEYCH0_0
	DW	T30_LOOP_KEYCH0_1
	
T30_LOOP_KEYCH0_0
	
	JMP	T30_LOOP_S10
	
T30_LOOP_KEYCH0_1:

	JMP	STEP_TBL_INC


;===========================================
; LED TEST
;===========================================
T40_LOOP_PRE:


	MR_SET_DLYCNT0 CNT_STOP
	MR_SET_AUTOCNT2_TEST; enter stop / next step

;	MR_SET_DLYCNT0_IDX T000333MS,0
;
	STZ	WB_DLYCNT0_IDX
	JMP	T40_LOOP_CNT0

T40_LOOP:
	JSR	WAITKEY
T40_LOOP_S10:
	LDA	USER_FLAG_A
	BIT	#C_KEYCH0_BIT
	BNE	T40_LOOP_KEYCH0_J1
	BIT	#C_KEYCH1_BIT
	BNE	T40_LOOP_KEYCH1_J1
	BIT	#C_KEYCH2_BIT
	BNE	T40_LOOP_KEYCH2_J1
	BIT	#C_KEYCH3_BIT
	BNE	T40_LOOP_KEYCH3_J1
	BIT	#C_SPCH1_BIT
	BNE	T40_LOOP_CH1END_J1
	BIT	#C_SPCH2_BIT
	BNE	T40_LOOP_CH2END_J1
	
	LDA	USER_FLAG_B
	BIT	#C_CNT0_BIT
	BNE	T40_LOOP_CNT0
	BIT	#C_CNT1_BIT
	BNE	T40_LOOP_CNT1_J1
	BIT	#C_AUTO_CNT_BIT
	BNE	T40_LOOP_AUTOCNT_J1
	
	JMP	T40_LOOP
T40_LOOP_KEYCH0_J1:
	JMP	T40_LOOP_KEYCH0
T40_LOOP_KEYCH1_J1:
	JMP	T40_LOOP_KEYCH1
T40_LOOP_KEYCH2_J1:
	JMP	T40_LOOP_KEYCH2
T40_LOOP_KEYCH3_J1:
	JMP	T40_LOOP_KEYCH3
T40_LOOP_AUTOCNT_J1:
	JMP T40_LOOP_AUTOCNT
T40_LOOP_CH1END_J1:
	JMP T40_LOOP_CH1END
T40_LOOP_CH2END_J1:
	JMP T40_LOOP_CH2END
T40_LOOP_CNT1_J1:
	JMP	T40_LOOP_CNT1
T40_LOOP_CNT0:; IDLE TIMER
	MACRO_CLR_CNT0_FLAG
;
	LDA	WB_DLYCNT0_IDX
	ASL	A
	TAX
	JMP	(T40_LOOP_CNT0_TBL,X)
T40_LOOP_CNT0_TBL:
	DW	T40_LOOP_CNT0_0
	DW	T40_LOOP_CNT0_1
	DW	T40_LOOP_CNT0_2

T40_LOOP_CNT0_0:
	MR_SET_DLYCNT0_IDX T000333MS,1
	
	JMP	T40_LOOP_S10
T40_LOOP_CNT0_1:
	MR_SET_DLYCNT0_IDX T000333MS,2
	JMP	T40_LOOP_S10
T40_LOOP_CNT0_2:
	MR_SET_DLYCNT0_IDX T000333MS,0

	JMP	T40_LOOP_S10
T40_LOOP_CNT1:
	MACRO_CLR_CNT1_FLAG
;

	JMP	T40_LOOP_S10
T40_LOOP_CNT2:
	MACRO_CLR_CNT2_FLAG
	
	JMP	T40_LOOP_S10
T40_LOOP_CNT3:
	MACRO_CLR_CNT3_FLAG
	
	JMP	T40_LOOP_S10
T40_LOOP_CH1END:
	MACRO_CLR_CH1_FLAG
;
;
	
	JMP	T40_LOOP_S10
	
T40_LOOP_CH2END:
	MACRO_CLR_CH2_FLAG
;
;	
;	
	JMP	T40_LOOP_S10

T40_LOOP_AUTOCNT:
	MACRO_CLR_AUTOCNT_FLAG
;

.IF ( C_AUTO_NEXT_EN .EQ. 1)
	JMP	STEP_TBL_INC
.ELSE
	JMP	L_TEST_ERROR
.ENDIF
	
T40_LOOP_KEYCH1:
	MACRO_CLR_KEYCH1_FLAG


	JMP	T40_LOOP_S10
T40_LOOP_KEYCH2:
	MACRO_CLR_KEYCH2_FLAG
;MODE

	JMP	T40_LOOP_S10
T40_LOOP_KEYCH3:
	MACRO_CLR_KEYCH3_FLAG


	JMP	T40_LOOP_S10

T40_LOOP_KEYCH0:
	MACRO_CLR_KEYCH0_FLAG
; key channel 0

	LDA	WB_KEYCH_CODE
	ASL	A
	TAX
	JMP	(T40_LOOP_KEYCH0_TBL,X)
T40_LOOP_KEYCH0_TBL:
	DW	T40_LOOP_KEYCH0_0
	DW	T40_LOOP_KEYCH0_1
	
T40_LOOP_KEYCH0_0:
	
	
	JMP	T40_LOOP_S10
	
T40_LOOP_KEYCH0_1:
	
	JMP	STEP_TBL_INC




;=================================
T50_LOOP_PRE:;speech dump
	
	MR_SET_DLYCNT0 CNT_STOP
	MR_STOP_AUTOCNT
;	MR_SET_AUTOCNT2_TEST; enter stop / next step

	STZ	WB_DLYCNT0_IDX
	JMP	T50_LOOP_CNT0

T50_LOOP:
	JSR	WAITKEY
T50_LOOP_S10:
	LDA	USER_FLAG_A
	BIT	#C_KEYCH0_BIT
	BNE	T50_LOOP_KEYCH0_J1
	BIT	#C_KEYCH1_BIT
	BNE	T50_LOOP_KEYCH1_J1
	BIT	#C_KEYCH2_BIT
	BNE	T50_LOOP_KEYCH2_J1
	BIT	#C_KEYCH3_BIT
	BNE	T50_LOOP_KEYCH3_J1
	BIT	#C_SPCH1_BIT
	BNE	T50_LOOP_CH1END_J1
	BIT	#C_SPCH2_BIT
	BNE	T50_LOOP_CH2END_J1
	
	LDA	USER_FLAG_B
	BIT	#C_CNT0_BIT
	BNE	T50_LOOP_CNT0
	BIT	#C_CNT1_BIT
	BNE	T50_LOOP_CNT1
	BIT	#C_CNT2_BIT
	BNE	T50_LOOP_CNT2
	BIT	#C_AUTO_CNT_BIT
	BNE	T50_LOOP_AUTOCNT_J1
	
	JMP	T50_LOOP
T50_LOOP_KEYCH0_J1:
	JMP	T50_LOOP_KEYCH0
T50_LOOP_KEYCH1_J1:
	JMP	T50_LOOP_KEYCH1
T50_LOOP_KEYCH2_J1:
	JMP	T50_LOOP_KEYCH2
T50_LOOP_KEYCH3_J1:
	JMP	T50_LOOP_KEYCH3
T50_LOOP_AUTOCNT_J1:
	JMP T50_LOOP_AUTOCNT
T50_LOOP_CH1END_J1:
	JMP T50_LOOP_CH1END
T50_LOOP_CH2END_J1:
	JMP T50_LOOP_CH2END
T50_LOOP_CNT0:; IDLE TIMER
	MACRO_CLR_CNT0_FLAG
;IDLE
; SPEECH DUMP
	LDX	WB_DLYCNT0_IDX
	LDA	T_SPEECH_DUMP_TBL0,X
	CMP	#0FFH
	BNE	T50_LOOP_CNT0_S001
;SOUND END
	JMP	STEP_TBL_INC ;NEXT STEP

T50_LOOP_CNT0_S001:
	STA	SOUND_NO
	JSR	BK0_PLAY_SP_REAL

	INC	WB_DLYCNT0_IDX
;----------------------------

	JMP	T50_LOOP_S10
T50_LOOP_CNT1:
	MACRO_CLR_CNT1_FLAG
;

	JMP	T50_LOOP_S10
T50_LOOP_CNT2:
	MACRO_CLR_CNT2_FLAG
;
	JMP	T50_LOOP_S10
T50_LOOP_CNT3:
	MACRO_CLR_CNT3_FLAG
	
	JMP	T50_LOOP_S10
T50_LOOP_CH1END:
	MACRO_CLR_CH1_FLAG
;
	MR_SET_DLYCNT0 T001000MS

	JMP	T50_LOOP_S10

	
T50_LOOP_CH2END:
	MACRO_CLR_CH2_FLAG
;
	MR_SET_DLYCNT0 T001000MS

	JMP	T50_LOOP_S10

T50_LOOP_AUTOCNT:
	MACRO_CLR_AUTOCNT_FLAG
;

	JMP	T50_LOOP_S10
	
T50_LOOP_KEYCH1:
	MACRO_CLR_KEYCH1_FLAG
;WIPER

	JMP	T50_LOOP_S10
T50_LOOP_KEYCH2:
	MACRO_CLR_KEYCH2_FLAG
;MODE

	JMP	T50_LOOP_S10
T50_LOOP_KEYCH3:
	MACRO_CLR_KEYCH3_FLAG
	
	JMP	T50_LOOP_S10

T50_LOOP_KEYCH0:
	MACRO_CLR_KEYCH0_FLAG
; key channel 0

	LDA	WB_KEYCH_CODE
	ASL	A
	TAX
	JMP	(T50_LOOP_KEYCH0_TBL,X)
T50_LOOP_KEYCH0_TBL:
	DW	T50_LOOP_KEYCH0_0
	DW	T50_LOOP_KEYCH0_1
	
T50_LOOP_KEYCH0_0:
	
	JSR	BK0_STOP_ALL
	
	JMP	T50_LOOP_S10
	
T50_LOOP_KEYCH0_1:

	JMP	STEP_TBL_INC


;===============================================================
;	
;===============================================================
L_TEST_ERROR:
	MR_SET_MODE_NO C_TESTM0_ERROR
	PLAY	di_6k+[1SEC]+di_6k+[1SEC]+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k+[1SEC]+di_6k
	JSR	WAIT_SPCH1_W_CHK
	JMP	ENTER_STOP	

L_TEST_EXIT:

	MR_SET_MODE_NO C_TESTM0_EXIT
	JSR	BK0_LEDS_OFF
	JSR	WAIT_SPCH1_W_CHK
	JMP	ENTER_STOP	
;return to main loop
	JMP	POI_USER


;-----------------------------------
;SPEECH DUMP TABLE
;-------------------------------------
T_SPEECH_DUMP_TBL0:



	DB	0FFH ; END

T_SPEECH_DUMP_TBL1:


	DB	0FFH ; END

;=====================================
;	SUBROUTINE,TABLE
;=======================================
TEST_LED_FSH1_TBL:
	DB	00001000B
	DB	00000010B
	DB	00H

TEST_LED_PATT_TBL:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10
	
	DB	0FFH



BK0_LEDS_OFF:



	RTS

BK0_LEDS_ON:


	RTS


